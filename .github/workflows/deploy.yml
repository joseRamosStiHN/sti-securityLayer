name: Security Layer build and Deploy

on:
  push:
    branches:
      - deploy

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up SDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Replace Properties
        run: |
          CONFIG_FILE="src/main/resources/application.properties"
          # Si la clave ya existe, la reemplaza; si no, la añade
          sed -i "/^spring.datasource.url=/c\spring.datasource.url=${{ secrets.DATABASE_URL }}" $CONFIG_FILE || echo "spring.datasource.url=${{ secrets.DATABASE_URL }}" >> $CONFIG_FILE
          sed -i "/^spring.datasource.username=/c\spring.datasource.username=${{ secrets.DATABASE_USERNAME }}" $CONFIG_FILE || echo "spring.datasource.username=${{ secrets.DATABASE_USERNAME }}" >> $CONFIG_FILE
          # Esta línea preserva caracteres especiales en la contraseña
          sed -i "/^spring.datasource.password=/c\spring.datasource.password=$(printf '%s\n' "${{ secrets.DATABASE_PASSWORD }}")" $CONFIG_FILE || echo "spring.datasource.password=$(printf '%s\n' "${{ secrets.DATABASE_PASSWORD }}")" >> $CONFIG_FILE
          # SSL
          sed -i "/^server.ssl.key-store=/c\server.ssl.key-store=${{ secrets.KEY_STORE }}" $CONFIG_FILE || echo "server.ssl.key-store=${{ secrets.KEY_STORE }}" >> $CONFIG_FILE
          sed -i "/^server.ssl.key-store-password=/c\server.ssl.key-store-password=${{ secrets.KEY_STORE_PASSWORD }}" $CONFIG_FILE || echo "server.ssl.key-store-password=${{ secrets.KEY_STORE_PASSWORD }}" >> $CONFIG_FILE
          sed -i "/^server.ssl.key-store-type=/c\server.ssl.key-store-type=PKCS12" $CONFIG_FILE || echo "server.ssl.key-store-type=PKCS12" >> $CONFIG_FILE
          sed -i "/^server.ssl.key-alias=/c\server.ssl.key-alias=tomcat" $CONFIG_FILE || echo "server.ssl.key-alias=tomcat" >> $CONFIG_FILE

          sed -i "/^server.port=/c\server.port=8081" $CONFIG_FILE || echo "server.port=8081" >> $CONFIG_FILE

          # Verificar contenido final del archivo
          cat $CONFIG_FILE

      - name: Build with maven
        run: |
          mvn clean package -DskipTests 
          ls -l target/  # Verificar que el JAR fue creado

      - name: Set up SSH Key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" | sed 's/\\n/\n/g' > key.pem
          chmod 600 key.pem

      - name: Test SSH Connection
        run: |
          ssh -o StrictHostKeyChecking=no -i key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "echo 'Conexión exitosa'"

      - name: Deploy to EC2
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" | sed 's/\\n/\n/g' > key.pem
          chmod 600 key.pem

          scp -o StrictHostKeyChecking=no -i key.pem target/securityLayer-1.0.0.jar ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/app
          ssh -o StrictHostKeyChecking=no -i key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} 'sudo systemctl restart securityService'
